package main

import (
	"archive/zip"
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"strings"

	"github.com/IBM/sarama"
	"github.com/joho/godotenv"
)

const (
	cveListURL = "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip"
)

type CVERecord struct {
	CVEDataType    string `json:"CVE_data_type"`
	CVEDataFormat  string `json:"CVE_data_format"`
	CVEDataVersion string `json:"CVE_data_version"`
	CVEDataMeta    struct {
		ID                string `json:"cveId"`
		AssignerOrgID     string `json:"assignerOrgId"`
		AssignerShortName string `json:"assignerShortName"`
		DatePublished     string `json:"datePublished"`
		DateReserved      string `json:"dateReserved"`
		DateUpdated       string `json:"dateUpdated"`
		State             string `json:"state"`
	} `json:"cveMetadata"`
	Containers struct {
		CNA struct {
			ProviderMetadata struct {
				OrgID     string `json:"orgId"`
				ShortName string `json:"shortName"`
			} `json:"providerMetadata"`
			Title        string `json:"title"`
			Descriptions []struct {
				Lang  string `json:"lang"`
				Value string `json:"value"`
			} `json:"descriptions"`
			Affected []struct {
				Product string `json:"product"`
				Version string `json:"version"`
			} `json:"affected"`
		} `json:"cna"`
	} `json:"containers"`
}

func downloadFile(url string) ([]byte, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to download file: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("failed to download file: %v", resp.Status)
	}
	buf := new(bytes.Buffer)
	_, err = io.Copy(buf, resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response body: %v", err)
	}
	return buf.Bytes(), nil
}

func processCVEZipFile(producer sarama.SyncProducer, zipBytes []byte) error {
	reader, err := zip.NewReader(bytes.NewReader(zipBytes), int64(len(zipBytes)))
	if err != nil {
		return fmt.Errorf("failed to create zip reader: %v", err)
	}
	for _, file := range reader.File {
		if !file.FileInfo().IsDir() && strings.HasSuffix(file.Name, ".json") && strings.HasPrefix(file.Name, "cvelistV5-main/cves/") {
			err := processCVEFile(producer, file)
			if err != nil {
				fmt.Printf("Failed to process file: %s, error: %v\n", file.Name, err)
			}
			fmt.Println("Processed file:", file.Name)
		}
	}
	return nil
}

func processCVEFile(producer sarama.SyncProducer, file *zip.File) error {
	fmt.Println("Processing file:", file.Name)
	fileReader, err := file.Open()
	if err != nil {
		return fmt.Errorf("failed to open file %s: %v", file.Name, err)
	}
	defer fileReader.Close()

	content, err := ioutil.ReadAll(fileReader)
	if err != nil {
		return fmt.Errorf("failed to read file %s: %v", file.Name, err)
	}

	var cve CVERecord
	if err := json.Unmarshal(content, &cve); err != nil {
		return fmt.Errorf("failed to unmarshal JSON in file %s: %v", file.Name, err)
	}

	kafkaTopic := os.Getenv("KAFKA_TOPIC")
	return publishToKafka(producer, kafkaTopic, cve)
}

func publishToKafka(producer sarama.SyncProducer, topic string, cve CVERecord) error {
	message, err := json.Marshal(cve)
	if err != nil {
		return err
	}

	msg := &sarama.ProducerMessage{
		Topic: topic,
		Value: sarama.StringEncoder(message),
	}

	partition, offset, err := producer.SendMessage(msg)
	if err != nil {
		return fmt.Errorf("failed to send message to Kafka: %v", err)
	}

	fmt.Printf("Message is stored in topic(%s)/partition(%d)/offset(%d)\n", topic, partition, offset)
	return nil
}

func main() {
	godotenv.Load()
	fmt.Println("Downloading CVE list...")
	zipBytes, err := downloadFile(cveListURL)
	if err != nil {
		fmt.Printf("Error downloading CVE list: %v\n", err)
		return
	}

	fmt.Println("Connecting to Kafka...")
	brokerList := []string{os.Getenv("KAFKA_BROKER")}
	config := sarama.NewConfig()
	config.Producer.Retry.Max = 5
	config.Producer.RequiredAcks = sarama.WaitForAll
	config.Producer.Return.Successes = true
	producer, err := sarama.NewSyncProducer(brokerList, config)
	if err != nil {
		fmt.Printf("Error connecting to Kafka: %v\n", err)
		return
	}
	defer producer.Close()

	fmt.Println("Processing JSON files...")
	err = processCVEZipFile(producer, zipBytes)
	if err != nil {
		fmt.Printf("Error processing JSON files: %v\n", err)
		return
	}
	fmt.Println("CVE records processed and published to Kafka successfully.")
}
